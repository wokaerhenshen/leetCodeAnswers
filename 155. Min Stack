Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


best C++ solutioN:

//这题，也就是说，在Minstack里新建两个stack，一个是data的stack，一个是min的stack
class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> data;
    stack<int> minS;
    MinStack() {        
    }
    
    void push(int x) {        
        data.push(x);
        
        //如果minS是empty，【直接塞入】，然后可以return了
        if (minS.empty()) {
            minS.push(x);
            return;
        }
        
        //不然的话，要看现在的top是不是最小，如果不是的话，塞入当前【元素】，如果是的话，把top再【塞入】一遍，为了以后【pop备用】
        int top = minS.top();
        if (minS.top() < x) minS.push(top);
        else minS.push(x);
    }
    
    void pop() {        
        if (data.empty()) return;
        //当你pop的时候，两个stack都要pop，这样就会用到原来的【备用值】
        data.pop();
        minS.pop();
    }
    
    int top() {
        //返回首元素的值的时候，返回data首元素的值就【好啦】
        if (data.empty()) return -1;
        return data.top();
    }
    
    int getMin() {
        //返回最小值的时候，返回minStack的顶上的元素即可。
        if (minS.empty()) return -1;
        return minS.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
