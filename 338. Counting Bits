Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

karl's solution:

public class Solution {
    public int[] CountBits(int num) {
        int[] result = new int[num+1];
        for(int i = 0; i <= num ; i++ ){
            //just for every number counter it's bits and push the result for each num to an array
            result[i] = countSetBits(i);
        }
        return result;
    }
    
    static int countSetBits(int n) 
    { 
        int count = 0; 
        while (n > 0) { 
            //if this digit is > 0 then must be true
            count += n & 1; 
            //bit move, just move the pointer to be right one bit 
            //for example 4 was 10 ane if move right it becomes 0. Then count is 1 forever.
            n >>= 1; 
        } 
        return count; 
    } 
}
