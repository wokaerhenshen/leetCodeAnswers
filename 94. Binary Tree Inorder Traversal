Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?


best solution:

//所谓的 inorder 也就是说，先返回左node，然后再返回当前val，再返回右node，直接用recusive就好了，定义一个helper function，然后如果传进去的root != null
//的话就可以用recusive操作起来。



public class Solution {
    public List<int> InorderTraversal(TreeNode root) {
        List<int> res = new List<int>();
        helper(root,res);
        return res;
    }
    
    public void helper(TreeNode root,List<int> res){
        if(root != null){
            if(root.left != null){
                helper(root.left,res);
            }
            res.Add(root.val);
            if(root.right != null){
                helper(root.right,res);
            }
        }
    }
}
