Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.


best solution:

//要算出，对每个节点来说的，左侧深度和右侧深度的和的最大值，就是要求的结果
class Solution {
    //设个global 的var 作为用来比较的值
    int ans;
    public int diameterOfBinaryTree(TreeNode root) {
        ans = 1;
        depth(root);
        return ans - 1;
    }
    public int depth(TreeNode node) {
        if (node == null) return 0;
        int L = depth(node.left);
        int R = depth(node.right);
        //跟这个全局变量 ans来比大小
        ans = Math.max(ans, L+R+1);
        //算出该node的depth
        return Math.max(L, R) + 1;
    }
}

