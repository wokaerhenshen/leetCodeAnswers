Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


best Java SolutioN:

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null) return false;
        //定义两个【pointer】
        ListNode walker = head;
        ListNode runner = head;
        //任意一个可能是null的时候，直接返回false，因为如果可能是null说明不存在【环】
        while(runner.next!=null && runner.next.next!=null) {
            walker = walker.next;
            runner = runner.next.next;
            //如果都不为null，并且两个pointer【相遇】了，则说明必有环的存在，runner套了walker【一圈】，直接返回true
            if(walker==runner) return true;
        }
        return false;
    }
}

