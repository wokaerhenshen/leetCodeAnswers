Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

best solution:

class Solution {
    static List<String> result;
    public List<String> generateParenthesis(int n) {
        result = new ArrayList<>();
        //直接导入【generate】函数，这时候 左右两边的n都是拉满的
        generate("",n, n);
        return result;
    }
    
    private static void generate(String brackets, int open, int close){
        //如果最后一个【右括号】用完了，则直接加入result
        if(close <= 0){
            result.add(brackets);
        }
        //如果左括号还》0 ，则可以继续弄左边，进一步看情况
        if(open > 0){generate(brackets+"(", open - 1, close);}
        //如果 右边的数量大于左边，则可以 弄【右边】
        if(close > open){generate(brackets+")", open, close-1);}
        //这样两个if 弄完的话，保证 没有一样的，并且完全所有的都弄过了。
    }
}
