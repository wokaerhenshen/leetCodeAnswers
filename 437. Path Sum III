You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

karl's solution:

don't know what's the issue:

public class Solution {
    static int result = 0;
    public int PathSum(TreeNode root, int sum) {
        PathCalc(root,sum); 
        return result;
    }
    public void PathCalc(TreeNode root, int sum){
        if(root != null){
            if(root.val == sum){
                result++;
            }
            PathCalc(root.left,sum-root.val);
            PathCalc(root.right,sum-root.val);
            PathCalc(root.left,sum);
            PathCalc(root.right,sum);
        }
    }
}

best solution:
class Solution {
    // Complexity: 
    // - Time: O(N), N is the node number of the tree
    // - Space: O(h), h is the height of the tree
    
    int helper(TreeNode root, int sum, HashMap<Integer, Integer> prefixSum, int currentSum) {
        if (root == null) return 0;
        
        currentSum += root.val;
        
        // We need to count prefixSumX that currentSum - prefixSumX = sum
        // => prefixSumX = currentSum - sum;
        int cntPrefixSumX = prefixSum.getOrDefault(currentSum - sum, 0);
        
        // Put currentSum to prefixSum map
        prefixSum.put(currentSum, prefixSum.getOrDefault(currentSum, 0) + 1);
        
        // Find answers from child nodes
        int total = cntPrefixSumX 
            + helper(root.left, sum, prefixSum, currentSum) 
            + helper(root.right, sum, prefixSum, currentSum);
        
        // Backtracking
        prefixSum.put(currentSum, prefixSum.getOrDefault(currentSum, 0) - 1);
        
        return total;
    }
    
    public int pathSum(TreeNode root, int sum) {
        HashMap<Integer, Integer> prefixSum = new HashMap<>();
        
        // Init prefixSum with 0
        // For example: arr=[1, 5, 3] -> prefixSum = [0, 1, 6, 9]
        prefixSum.put(0, 1);
        
        return helper(root, sum, prefixSum, 0);
    }
}
