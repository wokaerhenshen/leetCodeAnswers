question:

A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.


solution:

public class Solution {
    public IList<int> PartitionLabels(string S) {
        int[] last = new int[26];
        //找到每个字母最后出现的位置
        for(int i = 0 ; i < S.Length ; i ++){
            last[S[i] - 'a'] = i;
        }
        
        int j = 0;
        int index = 0;
        List<int> result = new List<int>();
        //循环一遍，如果说目前为止所有字母最后一个 最后出现的位置 就是现在的位置的话，就把这个当作结果返回之。
        for(int i = 0 ; i < S.Length ; i++ ){
            j = Math.Max(j,last[S[i] - 'a']);
            if( i == j ){
                result.Add(j-index+1);
                index = i+1;
            }
        }
        return result;
}
}
