Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3

karl's solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
 //设计一个helper function，递归的应该是 比如【左边的右子树】与【右边的左子树】，就这么设计就完事了
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return checkNodes(root.left,root.right);
    }
    
    public bool checkNodes(TreeNode left, TreeNode right){
        if((left == null && right != null) ||(left != null && right == null)){
            return false;
        }
        
        if(left == null && right == null){
            return true;
        }
        if(left.val != right.val){
            return false;
        }else{
            return checkNodes(left.right,right.left) && checkNodes(left.left,right.right);            
        }
    }
}

best and clearer answer & code:

public boolean isMirror(TreeNode t1, TreeNode t2) {
    //一个为 null => false 都为null => true
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}

