Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

karl solution:

//之前看到过一道非常【类似】的题， 也就是说一个思想，如果<0的话，之前的总和就一笔勾销了，直接用0 再开始加就是了。

public class Solution {
    public int MaxSubArray(int[] nums) {
        int temp = 0;
        int result = int.MinValue;
        for(int i = 0 ; i < nums.Length ; i++){
            temp += nums[i];
            result = Math.Max(result,temp);
            if(temp < 0){
                temp = 0;
            }
        }
        return result;
    }
}
